directive @fetchable(field_name: String) on OBJECT

"""Autogenerated input type of AddProjectUsers"""
input AddProjectUsersInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
  userIds: [ID!]!
}

"""Autogenerated return type of AddProjectUsers"""
type AddProjectUsersPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): [UserConnection!]!
}

type Client implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  projects: [Project!]!
  timers: [Timer!]!
  updatedAt: ISO8601DateTime!
}

"""The connection type for Client."""
type ClientConnection {
  """A list of edges."""
  edges: [ClientEdge]

  """A list of nodes."""
  nodes: [Client]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ClientEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Client
}

"""Autogenerated input type of CreateTasks"""
input CreateTasksInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
  attributes: [TaskAttributes!]!
}

"""Autogenerated return type of CreateTasks"""
type CreateTasksPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  tasks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TaskConnection!
}

"""Autogenerated input type of CreateTimer"""
input CreateTimerInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  attributes: TimerAttributes!
}

"""Autogenerated return type of CreateTimer"""
type CreateTimerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timer: TimerEdge!
}

"""Autogenerated input type of CreateUpload"""
input CreateUploadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  attributes: UploadAttributes!
}

"""Autogenerated return type of CreateUpload"""
type CreateUploadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  upload: Upload!
}

"""Autogenerated input type of DeleteTask"""
input DeleteTaskInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  taskId: ID!
}

"""Autogenerated return type of DeleteTask"""
type DeleteTaskPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  task: Task!
}

"""Autogenerated input type of DeleteTimer"""
input DeleteTimerInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timerId: ID!
}

"""Autogenerated return type of DeleteTimer"""
type DeleteTimerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timer: Timer!
}

"""Autogenerated input type of GeneratePresignedUrl"""
input GeneratePresignedUrlInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  path: String!
}

"""Autogenerated return type of GeneratePresignedUrl"""
type GeneratePresignedUrlPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  fields: PresignedUrlFields!
  url: String!
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type Mutation {
  addProjectUsers(
    """Parameters for AddProjectUsers"""
    input: AddProjectUsersInput!
  ): AddProjectUsersPayload
  createTasks(
    """Parameters for CreateTasks"""
    input: CreateTasksInput!
  ): CreateTasksPayload
  createTimer(
    """Parameters for CreateTimer"""
    input: CreateTimerInput!
  ): CreateTimerPayload
  createUpload(
    """Parameters for CreateUpload"""
    input: CreateUploadInput!
  ): CreateUploadPayload
  deleteTask(
    """Parameters for DeleteTask"""
    input: DeleteTaskInput!
  ): DeleteTaskPayload
  deleteTimer(
    """Parameters for DeleteTimer"""
    input: DeleteTimerInput!
  ): DeleteTimerPayload
  generatePresignedUrl(
    """Parameters for GeneratePresignedUrl"""
    input: GeneratePresignedUrlInput!
  ): GeneratePresignedUrlPayload
  removeProjectUsers(
    """Parameters for RemoveProjectUsers"""
    input: RemoveProjectUsersInput!
  ): RemoveProjectUsersPayload
  startRecording(
    """Parameters for StartRecording"""
    input: StartRecordingInput!
  ): StartRecordingPayload
  stopRecording(
    """Parameters for StopRecording"""
    input: StopRecordingInput!
  ): StopRecordingPayload
  updateProject(
    """Parameters for UpdateProject"""
    input: UpdateProjectInput!
  ): UpdateProjectPayload
  updateTask(
    """Parameters for UpdateTask"""
    input: UpdateTaskInput!
  ): UpdateTaskPayload
  updateTimer(
    """Parameters for UpdateTimer"""
    input: UpdateTimerInput!
  ): UpdateTimerPayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PresignedUrlFields {
  acl: String!
  algorithm: String!
  credential: String!
  date: String!
  key: String!
  policy: String!
  signature: String!
  successActionStatus: String!
}

type Project implements Node {
  client: Client!
  createdAt: ISO8601DateTime!
  hex: String
  id: ID!
  logo: Upload
  name: String!
  tasks: [Task!]!
  timers(startDate: ISO8601Date!, endDate: ISO8601Date!): [Timer!]!
  updatedAt: ISO8601DateTime!
  userIds: [ID!]!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
}

"""The connection type for Project."""
type ProjectConnection {
  """A list of edges."""
  edges: [ProjectEdge]

  """A list of nodes."""
  nodes: [Project]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProjectEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Project
}

input ProjectUpdateAttributes {
  projectName: String
  clientId: ID
  clientName: String
  hex: String
  logoId: ID
  removeLogo: Boolean
}

type Query {
  clients(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ClientConnection!
  currentUser: User!
  project(projectId: ID!): Project!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    projectIds: [ID!]
  ): ProjectConnection!
  timers(timerIds: [ID!]!): [Timer!]!
  user(userId: ID!): User!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
}

"""Autogenerated input type of RemoveProjectUsers"""
input RemoveProjectUsersInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
  userIds: [ID!]!
}

"""Autogenerated return type of RemoveProjectUsers"""
type RemoveProjectUsersPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): [UserConnection!]!
}

"""Autogenerated input type of StartRecording"""
input StartRecordingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timerId: ID!
}

"""Autogenerated return type of StartRecording"""
type StartRecordingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  stoppedTimer: Timer
  timer: Timer!
  user: User!
}

"""Autogenerated input type of StopRecording"""
input StopRecordingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timerId: ID!
}

"""Autogenerated return type of StopRecording"""
type StopRecordingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timer: Timer!
  user: User!
}

type Task implements Node {
  client: Client!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  project: Project!
  status: String!
  timers: [Timer!]!
  updatedAt: ISO8601DateTime!
}

input TaskAttributes {
  name: String!
}

"""The connection type for Task."""
type TaskConnection {
  """A list of edges."""
  edges: [TaskEdge]

  """A list of nodes."""
  nodes: [Task]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TaskEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Task
}

type Team implements Node {
  clients: [Client!]!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  updatedAt: ISO8601DateTime!
}

type Timer implements Node {
  createdAt: ISO8601DateTime!
  currentSeconds: Int!
  date: ISO8601Date!
  id: ID!
  lastActionAt: ISO8601DateTime!
  notes: String!
  project: Project!
  seconds: Int!
  status: String!
  task: Task!
  updatedAt: ISO8601DateTime!
  user: User!
}

input TimerAttributes {
  taskId: ID!
  date: String!
  seconds: Int
  notes: String!
}

"""The connection type for Timer."""
type TimerConnection {
  """A list of edges."""
  edges: [TimerEdge]

  """A list of nodes."""
  nodes: [Timer]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TimerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Timer
}

"""Autogenerated input type of UpdateProject"""
input UpdateProjectInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  projectId: ID!
  attributes: ProjectUpdateAttributes!
}

"""Autogenerated return type of UpdateProject"""
type UpdateProjectPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  project: Project!
}

"""Autogenerated input type of UpdateTask"""
input UpdateTaskInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  taskId: ID!
  attributes: TaskAttributes!
}

"""Autogenerated return type of UpdateTask"""
type UpdateTaskPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  task: Task!
}

"""Autogenerated input type of UpdateTimer"""
input UpdateTimerInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timerId: ID!
  attributes: TimerAttributes!
}

"""Autogenerated return type of UpdateTimer"""
type UpdateTimerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timer: Timer!
}

type Upload implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
  url: String!
}

input UploadAttributes {
  path: String!
  url: String!
  s3Key: String!
  filename: String!
  contentType: String!
  size: Int!
}

type User implements Node {
  avatar: Upload
  createdAt: ISO8601DateTime!
  displayName: String!
  email: String!
  firstName: String!
  id: ID!
  jobTitle: String
  lastName: String!
  permissions: UserPermissions!
  projects: [Project!]!
  recordingTimer: Timer
  role: String!
  status: String!
  team: Team!
  timers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: ISO8601Date!
    endDate: ISO8601Date!
  ): TimerConnection!
  updatedAt: ISO8601DateTime!
}

type UserClientPermissions {
  archive: UserPermissionValue!
  create: UserPermissionValue!
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """A list of nodes."""
  nodes: [User]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

type UserPermissions {
  clients: UserClientPermissions!
  projects: UserProjectsPermissions!
  users: UserUsersPermissions!
}

enum UserPermissionValue {
  """Can manage all of the given type, e.g. View stats: all"""
  all

  """Can manage this type"""
  yes

  """Can not manage this type"""
  no

  """Can only manage their own, e.g. View stats: self"""
  self

  """Can only manage those assigned to them, e.g. View projects: assigned"""
  assigned
}

type UserProjectsPermissions {
  archive: UserPermissionValue!
  create: UserPermissionValue!
  edit: UserPermissionValue!
  view: UserPermissionValue!
  viewStats: UserPermissionValue!
}

type UserUsersPermissions {
  create: UserPermissionValue!
  edit: UserPermissionValue!
  view: UserPermissionValue!
  viewStats: UserPermissionValue!
}

