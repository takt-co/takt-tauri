directive @fetchable(field_name: String) on OBJECT

type Account implements Node {
  id: ID!
  name: String!
  projects(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): ProjectConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UserConnection!
}

"""Autogenerated input type of ArchiveTimer"""
input ArchiveTimerInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timerId: ID!
}

"""Autogenerated return type of ArchiveTimer"""
type ArchiveTimerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timer: Timer!
}

input CreateTimerAttributes {
  projectId: ID!
  date: String!
  seconds: Int!
  notes: String!
}

"""Autogenerated input type of CreateTimer"""
input CreateTimerInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  attributes: CreateTimerAttributes!
}

"""Autogenerated return type of CreateTimer"""
type CreateTimerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timer: TimerEdge!
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

type Mutation {
  archiveTimer(
    """Parameters for ArchiveTimer"""
    input: ArchiveTimerInput!
  ): ArchiveTimerPayload
  createTimer(
    """Parameters for CreateTimer"""
    input: CreateTimerInput!
  ): CreateTimerPayload
  startRecording(
    """Parameters for StartRecording"""
    input: StartRecordingInput!
  ): StartRecordingPayload
  stopRecording(
    """Parameters for StopRecording"""
    input: StopRecordingInput!
  ): StopRecordingPayload
  updateTimer(
    """Parameters for UpdateTimer"""
    input: UpdateTimerInput!
  ): UpdateTimerPayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Project implements Node {
  id: ID!
  name: String!
}

"""The connection type for Project."""
type ProjectConnection {
  """A list of edges."""
  edges: [ProjectEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type ProjectEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Project
}

type Query {
  currentUser: User!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!
}

"""Autogenerated input type of StartRecording"""
input StartRecordingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timerId: ID!
}

"""Autogenerated return type of StartRecording"""
type StartRecordingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pausedTimer: Timer
  timer: Timer!
}

"""Autogenerated input type of StopRecording"""
input StopRecordingInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timerId: ID!
}

"""Autogenerated return type of StopRecording"""
type StopRecordingPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timer: Timer!
}

type Timer implements Node {
  account: Account!
  createdAt: ISO8601DateTime!
  date: ISO8601Date!
  id: ID!
  notes: String!
  project: Account!
  seconds: Int!
  status: TimerStatus!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""The connection type for Timer."""
type TimerConnection {
  """A list of edges."""
  edges: [TimerEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TimerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Timer
}

enum TimerStatus {
  """The timer is paused"""
  paused

  """The timer is currently recording"""
  recording

  """The timer has been archived"""
  archived
}

input UpdateTimerAttributes {
  projectId: ID
  date: String
  seconds: Int
  notes: String
}

"""Autogenerated input type of UpdateTimer"""
input UpdateTimerInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timerId: ID!
  attributes: UpdateTimerAttributes!
}

"""Autogenerated return type of UpdateTimer"""
type UpdateTimerPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  timer: Timer!
}

type User implements Node {
  account: Account!
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
  name: String!
  recordingTimer: Timer
  timers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: ISO8601Date!
    endDate: ISO8601Date!
  ): TimerConnection!
  updatedAt: ISO8601DateTime!
  username: String!
}

"""The connection type for User."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User
}

